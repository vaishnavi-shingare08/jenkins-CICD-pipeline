Started by user vaishnavi shingare
Obtained Jenkinsfile from git https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/MyAppPipeline1
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
The recommended git tool is: git
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/MyAppPipeline1/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git # timeout=10
Fetching upstream changes from https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git
 > git --version # timeout=10
 > git --version # 'git version 2.50.1'
 > git fetch --tags --force --progress -- https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse origin/main^{commit} # timeout=10
Checking out Revision cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 (origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 # timeout=10
Commit message: "Fix Flask port to 5000 for Docker"
 > git rev-list --no-walk cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] git
The recommended git tool is: git
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/MyAppPipeline1/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git # timeout=10
Fetching upstream changes from https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git
 > git --version # timeout=10
 > git --version # 'git version 2.50.1'
 > git fetch --tags --force --progress -- https://github.com/vaishnavi-shingare08/jenkins-CICD-pipeline.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D main # timeout=10
 > git checkout -b main cec7ea76ebee6b8e858f19fc484167b6ca8c9e93 # timeout=10
Commit message: "Fix Flask port to 5000 for Docker"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build)
[Pipeline] echo
Building Docker image...
[Pipeline] sh
+ docker build -t myapp:latest .
#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 224B done
#1 DONE 0.0s

#2 [internal] load metadata for docker.io/library/python:3.9-slim
#2 DONE 1.6s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/5] FROM docker.io/library/python:3.9-slim@sha256:cf0704507972b63c9b20382dd6f05248572d6b25961410305f96479bf2e8a23c
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 475.12kB 0.1s done
#5 DONE 0.1s

#6 [2/5] WORKDIR /app
#6 CACHED

#7 [3/5] COPY requirements.txt .
#7 CACHED

#8 [4/5] RUN pip install -r requirements.txt
#8 CACHED

#9 [5/5] COPY . .
#9 DONE 0.3s

#10 exporting to image
#10 exporting layers
#10 exporting layers 0.2s done
#10 writing image sha256:e139a69a38cf056fd1a883e2783966c549851b712b64a11663b201b721139e46 done
#10 naming to docker.io/library/myapp:latest done
#10 DONE 0.2s
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] echo
Running tests...
[Pipeline] sh
+ echo 'Tests passed!'
Tests passed!
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy)
[Pipeline] echo
Deploying application...
[Pipeline] sh
+ docker run -d -p 5000:5000 myapp:latest
d9814b244442ec6a3485056d9fa356a1bf2aa947bfb9f36182900b41d647d7a2
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
